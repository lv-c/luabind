import docutils ;
import os ;
import errors ;
import notfile ;
import package ;
import path ;
import virtual-target ;

VERSION = 0.9.0 ;
BOOST_ROOT = [ os.environ BOOST_ROOT ] ;

use-project /lua : $(LUA_ROOT) ;



rule debug-message ( txt * )
{
    if --debug-build in [ modules.peek : ARGV ]
    {
        echo \[luabind DEBUG\] $(txt) ;
    }
}

debug-message figuring out which libraries to link to... ;
debug-message os.name is [ os.name ] ;


rule tag-names ( name : type ? : property-set )
{
    if $(type) in STATIC_LIB SHARED_LIB IMPORT_LIB
    {
        if [ $(property-set).get <variant> ] = debug
		{
        	name = $(name)D ;
		}

		if [ $(property-set).get <address-model> ] = 32
		{
			name = $(name)-x86 ;
		}
    }

    local result = [ virtual-target.add-prefix-and-suffix $(name) : $(type) : $(property-set) ] ;

    if $(type) = SHARED_LIB &&
        ( ! ( [ $(property-set).get <target-os> ] in windows cygwin darwin aix ) &&
          ! ( [ $(property-set).get <toolset> ] in pgi ) )
    {
        result = $(result).$(VERSION) ;
    }

    return $(result) ;
}

SOURCES =
    class.cpp
    class_info.cpp
    class_registry.cpp
    class_rep.cpp
    create_class.cpp
    error.cpp
    exception_handler.cpp
    function.cpp
    inheritance.cpp
    link_compatibility.cpp
    object_rep.cpp
    open.cpp
    pcall.cpp
    scope.cpp
    stack_content_by_name.cpp
    weak_ref.cpp
    wrapper_base.cpp ;

usage-requirements =
	<library>/lua//lua
    <toolset>msvc,<link>shared:<cxxflags>/wd4251
    <link>shared:<define>LUABIND_DYNAMIC_LINK
	;

lib luabind
    : src/$(SOURCES)
    # requirements
    : <include>. <include>$(BOOST_ROOT)
	  <tag>@tag-names
	  <link>static
	  <cxxstd>latest
	  <warnings-as-errors>off

      $(usage-requirements)
    # default-build
    :
    # usage-requirements
    : <include>. <include>$(BOOST_ROOT)
      $(usage-requirements)
    ;

alias test
  : test//test
  # requirements
  :
  # default-build
  : <link>static <link>shared release debug ;

explicit test ;

rule git-describe ( )
{
    local result = [ SHELL "git describe HEAD 2>&1" : exit-status ] ;

    if $(result[2]) = 0
    {
        return [ MATCH "^v([a-zA-Z.0-9\\-]+)" : $(result[1]) ] ;
    }
}

version-tag = [ git-describe ] ;

if $(version-tag)
{
    actions make-version-file
    {
        echo ".. |version| replace:: $(version-tag)" > doc/version.rst
    }

    notfile make-version-file : @make-version-file ;
}
else
{
    alias make-version-file ;
}

if docs in [ modules.peek : ARGV ] 
{
    local result = [ SHELL "rst2html.py --version 2>&1" : exit-status ] ;
    if $(result[2]) = 0
    {
        found-rst2html = rst2html.py ;
    }
}

html docs.html
  : doc/docs.rst
  : <dependency>make-version-file
    <docutils-cmd>$(found-rst2html)
    <docutils-html>"--traceback -gdt --stylesheet=style.css --link-stylesheet" ;

stage docs : docs.html : <location>doc ;
explicit docs docs.html make-version-file ;

headers = [ path.glob-tree luabind : *.hpp ] ;

package.install install
  : <install-header-subdir>luabind
    <install-source-root>luabind
    <install-no-version-symlinks>on
  :
  : luabind
  : $(headers)
  ;

local stage-locate = [ MATCH "^--stagedir=(.*)" : [ modules.peek : ARGV ] ] ;
stage-locate ?= stage ;

install stage
  : luabind
  : <location>$(stage-locate)
    <install-no-version-symlinks>on
    <install-dependencies>on
    <install-type>LIB
  ;

explicit stage ;
